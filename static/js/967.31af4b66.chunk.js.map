{"version":3,"file":"static/js/967.31af4b66.chunk.js","mappings":"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","sources":["components/statistic/chart/chart.styled.js","components/statistic/chart/colorsChart.js","components/statistic/chart/chart.jsx","components/statistic/table/table.styled.js","components/statistic/table/table.jsx","pages/Statistic/Statistic.styled.js","components/statistic/selector/dropdown-select.styled.js","components/statistic/selector/dropdown-select.jsx","pages/Statistic/Statistic.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ChartWrapper = styled.div`\n  width: 280px;\n  height: 280px;\n  position: relative;\n\n  @media screen and (max-width: 767px) {\n    margin-left: auto;\n    margin-right: auto;\n    height: auto;\n    margin-bottom: 32px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 336px;\n    height: 336px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 288px;\n    height: 288px;\n  }\n`;\n\nexport const ChartBalInfo = styled.span`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  font-size: 18px;\n  line-height: calc(26 / 18);\n  font-weight: 700;\n`;\n","const colorsChart = [\n    'rgb(255, 99, 132)',\n    'rgb(255,69,0)',\n    'rgb(255,140,0)',\n    'rgb(255,215,0)',\n    'rgb(0,128,0)',\n    'rgb(30,144,255)',\n    'rgb(148,0,211)',\n    'rgb(255,20,147)',\n    'rgb(240,128,128)',\n    'rgb(255,160,122)',\n    'rgb(255,222,173)',\n  ];\n  \n  export default colorsChart;","import { Chart as ChartJS, ArcElement, Tooltip } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { ChartWrapper, ChartBalInfo } from './chart.styled';\nimport colorsChart from './colorsChart'\n\n\nChartJS.register(ArcElement, Tooltip);\n\nexport function Chart({ statistics }) {\n  const { expenseSummary, categoriesSummary } = statistics;\n  const data = {\n    labels: categoriesSummary.map(category => category.title),\n    datasets: [\n      {\n        label: 'Statistics',\n        data: categoriesSummary.map(category =>\n          category.total ? category.total : 0\n        ),\n        backgroundColor: colorsChart,\n        borderWidth: 0,\n        cutout: '65%',\n      },\n    ],\n  };\n  return (\n    <>\n      <ChartWrapper>\n        <Doughnut data={data} />\n        <ChartBalInfo>{` â‚´ ${expenseSummary}`}</ChartBalInfo>\n      </ChartWrapper>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Tabl = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  text-align: left;\n  margin-bottom: 16px;\n`;\n\nexport const TabHeader = styled.th`\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 27px;\n  padding: 0 28px;\n\n  @media screen and (max-width: 767px) {\n    padding: 0 20px;\n  }\n`;\n\nexport const TableHead = styled.thead`\n  border-radius: 30px;\n  display: table-header-group;\n  vertical-align: middle;\n  border-color: inherit;\n`;\nexport const TableHeadTr = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 18px;\n  line-height: 27px;\n  border-radius: 30px;\n  height: 58px;\n  background-color: var(--primary-bg-color);\n\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\nexport const Tabrow = styled.td`\n  display: inline-flex;\n  align-items: center;\n  padding-top: 15px;\n  padding-bottom: 15px;\n`;\n\nexport const Total = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0px 30px 15px 30px;\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 24px;\n`;\nexport const ExpenseSummary = styled.span`\n  color: #ff6596;\n`;\nexport const IncomeSummary = styled.span`\n  color: #24cca7;\n`;\nexport const TableBody = styled.tbody``;\n\nexport const BodyTr = styled.tr`\n  padding: 0 28px;\n  justify-content: space-between;\n  display: flex;\n  border-bottom: 1px solid #dcdcdf;\n  box-shadow: 0px 1px 0px rgb(255 255 255 / 60%);\n\n  @media screen and (max-width: 767px) {\n    padding: 0 20px;\n  }\n`;\nexport const BodyText = styled.span`\n  padding: 0 0px 0 16px;\n  justify-content: space-between;\n  display: flex;\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n`;\n","import {\n    Total,\n    Tabrow,\n    TabHeader,\n    Tabl,\n    TableHead,\n    TableHeadTr,\n    TableBody,\n    BodyTr,\n    BodyText,\n    ExpenseSummary,\n    IncomeSummary,\n  } from './table.styled';\n  import colorsChart from '../chart/colorsChart'\n  \n  export function Table({ statistics }) {\n    if (!statistics) {\n      return null;\n    }\n    const { expenseSummary, incomeSummary, categoriesSummary } = statistics;\n  \n    return (\n      <>\n        {!expenseSummary && !incomeSummary ? null : (\n          <Tabl>\n            <TableHead>\n              <TableHeadTr>\n                <TabHeader>Category</TabHeader>\n                <TabHeader>Sum</TabHeader>\n              </TableHeadTr>\n            </TableHead>\n            <TableBody>\n              {categoriesSummary.map(({name, total,},el) => (\n                <BodyTr key={name}>\n                  <Tabrow>\n                    <p\n                      style={{\n                        backgroundColor: colorsChart[el],\n                        width: '24px',\n                        height: '24px',\n                        borderRadius: '2px',\n                      }}\n                    ></p>\n                    <BodyText>{name}</BodyText>\n                  </Tabrow>\n                  <Tabrow></Tabrow>\n                  <Tabrow>\n                    <BodyText>{total ? total : 0}</BodyText>\n                  </Tabrow>\n                </BodyTr>\n              ))}\n            </TableBody>\n          </Tabl>\n        )}\n        <Total>\n          Expenses:\n          <ExpenseSummary>{expenseSummary}</ExpenseSummary>\n        </Total>\n        <Total>\n          Income: <IncomeSummary>{incomeSummary}</IncomeSummary>\n        </Total>\n      </>\n    );\n  }\n  ","import styled from 'styled-components';\n\nexport const StatisticsContainer = styled.div`\n  @media screen and (max-width: 768px) {\n    padding-top: 0;\n  }\n\n  @media screen and (min-width: 1280px) {\n    padding-top: 30px;\n    margin: 0 auto;\n  }\n\n  h2 {\n    width: 100%;\n    margin-bottom: 20px;\n    font-style: normal;\n    font-weight: 400;\n    font-size: 30px;\n    line-height: 45px;\n  }\n\n  p {\n    @media screen and (max-width: 767px) {\n      margin-bottom: 16px;\n    }\n  }\n`;\n\nexport const TableContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n\n  @media screen and (min-width: 768px) {\n    width: 336px;\n    margin-left: auto;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 395px;\n    margin-left: auto;\n  }\n`;\n\nexport const StatisticsWrapper = styled.div`\n  @media screen and (min-width: 768px) {\n    display: flex;\n    justify-content: end;\n    margin-left: auto;\n    min-width: 704px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    min-width: 715px;\n  }\n`;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { Select } from 'react-dropdown-select';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n  margin-left: 0;\n  margin-right: auto;\n  width: 100%;\n\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n  }\n`;\n\nexport const StyledField = styled(Select)`\n  &.react-dropdown-select {\n    position: relative;\n    height: 50px;\n    background-color: transparent;\n    border: 1px solid #000;\n    border-radius: 30px;\n    font-family: 'Circe';\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 24px;\n    padding: 0 20px 0 20px;\n    color: #000;\n\n    &::after {\n      content: '';\n      position: absolute;\n      top: 50%;\n      right: 10px;\n      display: block;\n      width: 12px;\n      height: 12px;\n      border-top: 1px solid;\n      border-left: 1px solid;\n      transform: rotate(-135deg) translateY(-50%);\n      transform-origin: 0 0;\n    }\n  }\n\n  .react-dropdown-select-dropdown-handle {\n    position: absolute;\n    visibility: hidden;\n  }\n`;\n\nexport const FieldContainer = styled.div`\n  position: relative;\n  width: 50%;\n\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\n// import Notiflix from 'notiflix';\nimport { getStatistic } from '../../../redux/statistic/statisticOperations';\nimport { useEffect, useState } from 'react';\nimport {\n  StyledForm,\n  StyledField,\n  FieldContainer,\n} from './dropdown-select.styled';\nimport { useDispatch } from 'react-redux';\n\nexport function Selectors() {\n  const [month, setMonth] = useState();\n  const [year, setYear] = useState();\n\n  const dispatch = useDispatch();\n\n  // Notiflix.Notify.merge({\n  //   timeout: 4000,\n  //   width: '300 px',\n  //   useIcon: true,\n  //   fontSize: '12px',\n  //   distance: '90px',\n  //   clickToClose: true,\n  // });\n\n  useEffect(() => {\n    if (!Boolean(month) || !Boolean(year)) return;\n    dispatch(getStatistic({ month, year }));\n  }, [dispatch, month, year]);\n\n  const handleMonthChange = e => {\n    setMonth(e[0].value);\n  };\n  const handleYearChange = e => {\n    setYear(e[0].value);\n  };\n\n  const options = [\n    { name: 'January', value: 1 },\n    { name: 'February', value: 2 },\n    { name: 'March', value: 3 },\n    { name: 'April', value: 4 },\n    { name: 'May', value: 5 },\n    { name: 'June', value: 6 },\n    { name: 'July', value: 7 },\n    { name: 'August', value: 8 },\n    { name: 'September', value: 9 },\n    { name: 'October', value: 10 },\n    { name: 'November', value: 11 },\n    { name: 'December', value: 12 },\n  ];\n\n  const yearOptions = generateYearOptions(new Date().getFullYear());\n  const currentMonth = generateCurrentMonth(month, options);\n\n  return (\n    <>\n      <Formik>\n        <StyledForm>\n          <FieldContainer>\n            <StyledField\n              options={options}\n              labelField=\"name\"\n              valueField=\"value\"\n              onChange={handleMonthChange}\n              placeholder={currentMonth}\n            />\n          </FieldContainer>\n          <ErrorMessage name=\"month\" />\n          <FieldContainer>\n            <StyledField\n              options={yearOptions.map(year => ({\n                value: year,\n              }))}\n              labelField=\"value\"\n              valueField=\"value\"\n              placeholder={year}\n              onChange={handleYearChange}\n            ></StyledField>\n          </FieldContainer>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n}\n\nfunction generateCurrentMonth(month, options) {\n  let currentMonth = options.filter(e => e.value === month);\n\n  return currentMonth[0]?.name;\n}\n\nfunction generateYearOptions(currentYear) {\n  let yearOptions = [];\n  for (let i = 2017; i <= currentYear; i += 1) {\n    yearOptions.push(i);\n  }\n  return yearOptions;\n}\n","import { useSelector } from 'react-redux';\nimport { Chart } from '../../components/statistic/chart/chart';\nimport { Table } from '../../components/statistic/table/table';\nimport {\n  StatisticsContainer,\n  TableContainer,\n  StatisticsWrapper,\n} from './Statistic.styled';\nimport { Selectors } from '../../components/statistic/selector/dropdown-select';\n\nexport function Statistic() {\n  const statistics = useSelector(state => state.statisticData.statistic);\n  const categoriesSummary = statistics?.categoriesSummary?.filter(\n    trans => trans.type !== 'INCOME'\n  );\n\n  const statisticsExpenses = { ...statistics, categoriesSummary };\n\n  return (\n    <>\n      <StatisticsContainer>\n        <h2>Statistics</h2>\n        <StatisticsWrapper>\n          {statistics && (\n            <>\n              {statistics?.incomeSummary || statistics?.expenseSummary ? (\n                statistics?.expenseSummary ? (\n                  <Chart statistics={statisticsExpenses} />\n                ) : (\n                  <p>\n                    There are no expenses\n                    <br /> in the selected period\n                  </p>\n                )\n              ) : null}\n            </>\n          )}\n          <TableContainer>\n            <Selectors />\n            <Table statistics={statisticsExpenses} />\n          </TableContainer>\n        </StatisticsWrapper>\n      </StatisticsContainer>\n    </>\n  );\n}\n\nexport default Statistic;\n"],"names":["ChartWrapper","styled","ChartBalInfo","Chart","statistics","expenseSummary","categoriesSummary","data","labels","map","category","title","datasets","label","total","backgroundColor","colorsChart","borderWidth","cutout","ChartJS","ArcElement","Tooltip","Tabl","TabHeader","TableHead","TableHeadTr","Tabrow","Total","ExpenseSummary","IncomeSummary","TableBody","BodyTr","BodyText","Table","incomeSummary","el","name","style","width","height","borderRadius","StatisticsContainer","TableContainer","StatisticsWrapper","StyledForm","Form","StyledField","Select","FieldContainer","Selectors","useState","month","setMonth","year","setYear","dispatch","useDispatch","useEffect","Boolean","getStatistic","options","value","yearOptions","currentYear","i","push","generateYearOptions","Date","getFullYear","currentMonth","filter","e","generateCurrentMonth","labelField","valueField","onChange","placeholder","Statistic","useSelector","state","statisticData","statistic","trans","type","statisticsExpenses"],"sourceRoot":""}