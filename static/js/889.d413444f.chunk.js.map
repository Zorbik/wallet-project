{"version":3,"file":"static/js/889.d413444f.chunk.js","mappings":"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","sources":["components/statistic/chart/chart.styled.js","components/statistic/chart/chart.jsx","components/statistic/table/table.styled.js","components/statistic/table/table.jsx","pages/Statistic/Statistic.styled.js","components/statistic/selector/dropdown-select.styled.js","components/statistic/selector/dropdown-select.jsx","pages/Statistic/Statistic.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ChartWrapper = styled.div`\n  width: 280px;\n  height: 280px;\n  position: relative;\n\n  @media screen and (max-width: 767px) {\n    margin-left: auto;\n    margin-right: auto;\n    height: auto;\n    margin-bottom: 32px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 336px;\n    height: 336px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 288px;\n    height: 288px;\n  }\n`;\n\nexport const ChartBalInfo = styled.span`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  font-size: 18px;\n  line-height: calc(26 / 18);\n  font-weight: 700;\n`;\n","import { Chart as ChartJS, ArcElement, Tooltip } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { ChartWrapper, ChartBalInfo } from './chart.styled';\n\nChartJS.register(ArcElement, Tooltip);\n\nexport function Chart({ statistics }) {\n  const { totalExpenses, totalCategories } = statistics;\n  const data = {\n    labels: totalCategories.map(category => category.title),\n    datasets: [\n      {\n        label: 'Statistics',\n        data: totalCategories.map(category =>\n          category.total ? category.total : 0\n        ),\n        backgroundColor: totalCategories.map(category => category.color),\n        borderWidth: 0,\n        cutout: '65%',\n      },\n    ],\n  };\n  return (\n    <>\n      <ChartWrapper>\n        <Doughnut data={data} />\n        <ChartBalInfo>{` â‚´ ${totalExpenses}`}</ChartBalInfo>\n      </ChartWrapper>\n    </>\n  );\n}\n","import styled from 'styled-components';\n\nexport const Tabl = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  text-align: left;\n  margin-bottom: 16px;\n`;\n\nexport const TabHeader = styled.th`\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 27px;\n  padding: 0 28px;\n\n  @media screen and (max-width: 767px) {\n    padding: 0 20px;\n  }\n`;\n\nexport const TableHead = styled.thead`\n  border-radius: 30px;\n  display: table-header-group;\n  vertical-align: middle;\n  border-color: inherit;\n`;\nexport const TableHeadTr = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 18px;\n  line-height: 27px;\n  border-radius: 30px;\n  height: 58px;\n  background-color: var(--primary-bg-color);\n\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\nexport const Tabrow = styled.td`\n  display: inline-flex;\n  align-items: center;\n  padding-top: 15px;\n  padding-bottom: 15px;\n`;\n\nexport const Total = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0px 30px 15px 30px;\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 24px;\n`;\nexport const TotalExpenses = styled.span`\n  color: #ff6596;\n`;\nexport const TotalIncome = styled.span`\n  color: #24cca7;\n`;\nexport const TableBody = styled.tbody``;\n\nexport const BodyTr = styled.tr`\n  padding: 0 28px;\n  justify-content: space-between;\n  display: flex;\n  border-bottom: 1px solid #dcdcdf;\n  box-shadow: 0px 1px 0px rgb(255 255 255 / 60%);\n\n  @media screen and (max-width: 767px) {\n    padding: 0 20px;\n  }\n`;\nexport const BodyText = styled.span`\n  padding: 0 0px 0 16px;\n  justify-content: space-between;\n  display: flex;\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n`;\n","import {\n    Total,\n    Tabrow,\n    TabHeader,\n    Tabl,\n    TableHead,\n    TableHeadTr,\n    TableBody,\n    BodyTr,\n    BodyText,\n    TotalExpenses,\n    TotalIncome,\n  } from './table.styled';\n  \n  export function Table({ statistics }) {\n    if (!statistics) {\n      return null;\n    }\n    const { totalExpenses, totalIncome, totalCategories } = statistics;\n  \n    return (\n      <>\n        {!totalExpenses && !totalIncome ? null : (\n          <Tabl>\n            <TableHead>\n              <TableHeadTr>\n                <TabHeader>Category</TabHeader>\n                <TabHeader>Sum</TabHeader>\n              </TableHeadTr>\n            </TableHead>\n            <TableBody>\n              {totalCategories.map(category => (\n                <BodyTr key={category.id}>\n                  <Tabrow>\n                    <p\n                      style={{\n                        backgroundColor: category.color,\n                        width: '24px',\n                        height: '24px',\n                        borderRadius: '2px',\n                      }}\n                    ></p>\n                    <BodyText>{category.title}</BodyText>\n                  </Tabrow>\n                  <Tabrow></Tabrow>\n                  <Tabrow>\n                    <BodyText>{category.total ? category.total : 0}</BodyText>\n                  </Tabrow>\n                </BodyTr>\n              ))}\n            </TableBody>\n          </Tabl>\n        )}\n        <Total>\n          Expenses:\n          <TotalExpenses>{totalExpenses}</TotalExpenses>\n        </Total>\n        <Total>\n          Income: <TotalIncome>{totalIncome}</TotalIncome>\n        </Total>\n      </>\n    );\n  }\n  ","import styled from 'styled-components';\n\nexport const StatisticsContainer = styled.div`\n  @media screen and (max-width: 768px) {\n    padding-top: 0;\n  }\n\n  @media screen and (min-width: 1279px) {\n    padding-top: 30px;\n    margin-left: 138px;\n  }\n\n  h2 {\n    width: 100%;\n    margin-bottom: 20px;\n    font-style: normal;\n    font-weight: 400;\n    font-size: 30px;\n    line-height: 45px;\n  }\n\n  p {\n    @media screen and (max-width: 767px) {\n      margin-bottom: 16px;\n    }\n  }\n`;\n\nexport const TableContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: start;\n\n  @media screen and (min-width: 768px) {\n    width: 336px;\n    margin-left: auto;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 395px;\n    margin-left: auto;\n  }\n`;\n\nexport const StatisticsWrapper = styled.div`\n  @media screen and (min-width: 768px) {\n    display: flex;\n    justify-content: end;\n    margin-left: auto;\n    min-width: 704px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    min-width: 715px;\n  }\n`;\n","import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { Select } from 'react-dropdown-select';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n  margin-left: 0;\n  margin-right: auto;\n  width: 100%;\n\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n  }\n`;\n\nexport const StyledField = styled(Select)`\n  &.react-dropdown-select {\n    position: relative;\n    height: 50px;\n    background-color: transparent;\n    border: 1px solid #000;\n    border-radius: 30px;\n    font-family: 'Circe';\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 24px;\n    padding: 0 20px 0 20px;\n    color: #000;\n\n    &::after {\n      content: '';\n      position: absolute;\n      top: 50%;\n      right: 10px;\n      display: block;\n      width: 12px;\n      height: 12px;\n      border-top: 1px solid;\n      border-left: 1px solid;\n      transform: rotate(-135deg) translateY(-50%);\n      transform-origin: 0 0;\n    }\n  }\n\n  .react-dropdown-select-dropdown-handle {\n    position: absolute;\n    visibility: hidden;\n  }\n`;\n\nexport const FieldContainer = styled.div`\n  position: relative;\n  width: 50%;\n\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport Notiflix from 'notiflix';\nimport { getStatistic } from '../../../redux/statistic/statisticOperations';\nimport { useEffect, useState } from 'react';\nimport { StyledForm, StyledField, FieldContainer } from './dropdown-select.styled';\n\nexport function Selectors() {\n  const [month, setMonth] = useState(new Date().getMonth() + 1);\n  const [year, setYear] = useState(new Date().getFullYear());\n\n  const [getStatistics] = getStatistic();\n\n  Notiflix.Notify.merge({\n    timeout: 4000,\n    width: '300 px',\n    useIcon: true,\n    fontSize: '12px',\n    distance: '90px',\n    clickToClose: true,\n  });\n\n  useEffect(() => {\n    getStatistics({ month, year }).then(({ data }) => {\n      const { totalExpenses, totalIncome } = data[0];\n      if (!totalExpenses && !totalIncome) {\n        Notiflix.Notify.warning(\n          'There are no transactions in the selected period'\n        );\n      }\n    });\n  }, [month, year, getStatistics]);\n\n  const handleMonthChange = e => {\n    setMonth(Number(e[0].value));\n  };\n  const handleYearChange = e => {\n    setYear(Number(e[0].value));\n  };\n\n  const options = [\n    { name: 'January', value: 1 },\n    { name: 'February', value: 2 },\n    { name: 'March', value: 3 },\n    { name: 'April', value: 4 },\n    { name: 'May', value: 5 },\n    { name: 'June', value: 6 },\n    { name: 'July', value: 7 },\n    { name: 'August', value: 8 },\n    { name: 'September', value: 9 },\n    { name: 'October', value: 10 },\n    { name: 'November', value: 11 },\n    { name: 'December', value: 12 },\n  ];\n\n  const yearOptions = generateYearOptions(new Date().getFullYear());\n  const currentMonth = generateCurrentMonth(month, options);\n\n  return (\n    <>\n      <Formik>\n        <StyledForm>\n          <FieldContainer>\n            <StyledField\n              options={options}\n              labelField=\"name\"\n              valueField=\"value\"\n              onChange={handleMonthChange}\n              placeholder={currentMonth}\n            />\n          </FieldContainer>\n          <ErrorMessage name=\"month\" />\n          <FieldContainer>\n            <StyledField\n              options={yearOptions.map(year => ({\n                value: year,\n              }))}\n              labelField=\"value\"\n              valueField=\"value\"\n              placeholder={year}\n              onChange={handleYearChange}\n            ></StyledField>\n          </FieldContainer>\n        </StyledForm>\n      </Formik>\n    </>\n  );\n}\n\nfunction generateCurrentMonth(month, options) {\n  let currentMonth = options.filter(e => e.value === month);\n\n  return currentMonth[0].name;\n}\n\nfunction generateYearOptions(currentYear) {\n  let yearOptions = [];\n  for (let i = 2017; i <= currentYear; i += 1) {\n    yearOptions.push(i);\n  }\n  return yearOptions;\n}\n","import { useSelector } from 'react-redux';\nimport { Chart } from '../../components/statistic/chart/chart';\nimport { Table } from '../../components/statistic/table/table';\nimport {\n  StatisticsContainer,\n  TableContainer,\n  StatisticsWrapper,\n} from './Statistic.styled';\nimport { Selectors } from '../../components/statistic/selector/dropdown-select';\n\nexport function Statistic() {\n  const statistics = useSelector(state => state.userInformation.financeData);\n\n  return (\n    <>\n      <StatisticsContainer>\n        <h2>Statistics</h2>\n        <StatisticsWrapper>\n          {statistics && (\n            <>\n              {statistics?.totalIncome || statistics?.totalExpenses ? (\n                statistics?.totalExpenses ? (\n                  <Chart statistics={statistics} />\n                ) : (\n                  <p>\n                    There are no expenses\n                    <br /> in the selected period\n                  </p>\n                )\n              ) : null}\n            </>\n          )}\n          <TableContainer>\n            <Selectors />\n            <Table statistics={statistics} />\n          </TableContainer>\n        </StatisticsWrapper>\n      </StatisticsContainer>\n    </>\n  );\n}\n\nexport default Statistic;\n"],"names":["ChartWrapper","styled","ChartBalInfo","Chart","statistics","totalExpenses","totalCategories","data","labels","map","category","title","datasets","label","total","backgroundColor","color","borderWidth","cutout","ChartJS","ArcElement","Tooltip","Tabl","TabHeader","TableHead","TableHeadTr","Tabrow","Total","TotalExpenses","TotalIncome","TableBody","BodyTr","BodyText","Table","totalIncome","style","width","height","borderRadius","id","StatisticsContainer","TableContainer","StatisticsWrapper","StyledForm","Form","StyledField","Select","FieldContainer","Selectors","useState","Date","getMonth","month","setMonth","getFullYear","year","setYear","getStatistic","getStatistics","Notiflix","timeout","useIcon","fontSize","distance","clickToClose","useEffect","then","options","name","value","yearOptions","currentYear","i","push","generateYearOptions","currentMonth","filter","e","generateCurrentMonth","labelField","valueField","onChange","Number","placeholder","Statistic","useSelector","state","userInformation","financeData"],"sourceRoot":""}